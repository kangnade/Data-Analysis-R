library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df
?vector
?ncol
ncol(df)
output <- vector("double", ncol(df))
seq_along(df)
for(i in seq_along(df)){
output[[i]] <- median(df[[i]])
}
output
df[[1]]
df[1]
median(df[1])
output[1]
output[[1]]
2*output[1]
mtcars
head(mtcars)
output1 <- vector("double", ncol(mtcars))
for(i in seq_along(mtcars)){
output[[i]] <- mean(mtcars[[i]])
}
output1
?names
seq_along(mtcars)
mtcars[[1]]
for(i in seq_along(mtcars)){
output[i] <- mean(mtcars[[i]])
}
output1
names(output) <- names(mtcars)
output1 <- vector("double", ncol(mtcars))
names(output) <- names(mtcars)
for(i in names(mtcars)){
output[i] <- mean(mtcars[[i]])
}
output1
output <- vector("double", ncol(mtcars))
names(output) <- names(mtcars)
for (i in names(mtcars)) {
output[i] <- mean(mtcars[[i]])
}
output
for (i in seq_along(mtcars)) {
output[i] <- mean(mtcars[[i]])
}
output
output <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)) {
output[i] <- mean(mtcars[[i]])
}
output
flights <- nycflights13::flights
ncol(flights)
seq_along(mtcars)
output1 <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)) {
output1[i] <- mean(mtcars[[i]])
}
output1
output2 <- vector("character", ncol(flights))
output2 <- vector("character", ncol(flights))
for(i in seq_along(flights)){
output2[i] <- typeof(flights[[i]])
}
output2
output3 <- vector("list", ncol(flights))
for(i in seq_along(flights)){
output3[i] <- typeof(flights[[i]])
}
output3
names(output3) <- names(flights)
output3 <- vector("character", ncol(flights))
names(output3) <- names(flights)
for(i in names(flights)){
output3[i] <- typeof(flights[[i]])
}
output3
iris
output4 <- vector("double", ncol(iris))
names(output4) <- names(iris)
for(i in names(iris)){
output4[i] <- count(unique(iris[[i]]))
}
output4
for(i in names(iris)){
output4[i] <- length(unique(iris[[i]]))
}
output4
mean <- c(-10, 0, 10, 100)
output5 <- vector("list", length(mean))
for (i in seq_along(output5)) {
output5[[i]] <- rnorm(n, mean = mean[i])
}
output5
meanv <- c(-10, 0, 10, 100)
output5 <- vector("list", length(meanv))
for (i in seq_along(output5)) {
output5[[i]] <- rnorm(n, mean = meanv[i])
}
output5
n <- 10
# values of the mean
meanv <- c(-10, 0, 10, 100)
output5 <- vector("list", length(meanv))
for (i in seq_along(output5)) {
output5[[i]] <- rnorm(n, mean = meanv[i])
}
output5
library(string
library(stringr)
library(stringr)
str_c(letters, collapse = "")
x <- sample(100)
sd(x)
?runif
all.equal(cumsum(x),out)
x <- runif(100)
all.equal(cumsum(x),out)
out <- vector("numeric", length(x))
all.equal(cumsum(x),out)
?cat
humps <- c("five", "four", "three", "two", "one", "no")
for (i in humps) {
print(str_c("Alice the camel has ", rep(i, 3), " humps.",
collapse = "\n"), "\n")
if (i == "no") {
print("Now Alice is a horse.\n")
} else {
print("So go, Alice, go.\n")
}
print("\n")
}
for (i in humps) {
print(str_c("Alice the camel has ", rep(i, 3), " humps.",
collapse = "\n"))
if (i == "no") {
print("Now Alice is a horse.\n")
} else {
print("So go, Alice, go.\n")
}
print("\n")
}
humps <- c("five", "four", "three", "two", "one", "no")
for (i in humps) {
print(str_c("Alice the camel has ", rep(i, 3), " humps.",
collapse = "\\n"))
if (i == "no") {
print("Now Alice is a horse.\\n")
} else {
print("So go, Alice, go.\\n")
}
print("\\n")
}
non_preallocate <- function(x){
output <- vector("integer", 0)
for (i in seq_along(x)) {
output <- c(output, i)
}
output
}
preallocate <- function(y){
output_pre <- vector("interger", y)
for(i in seq_along(y)){
output_pre[[i]] <- i
}
output_pre
}
microbenchmark(non_preallocate(10000), times = 2)
?microbenchmark
install.packages("microbenchmark")
library(microbenchmark)
?microbenchmark
microbenchmark(non_preallocate(10000), times = 2)
microbenchmark(preallocate(10000), times = 2)
preallocate <- function(y){
output_pre <- vector("integer", y)
for(i in seq_along(y)){
output_pre[[i]] <- i
}
output_pre
}
microbenchmark(preallocate(10000), times = 2)
microbenchmark(non_preallocate(10000), times = 2)
microbenchmark(preallocate(10000), times = 2)
microbenchmark(non_preallocate(10000), times = 5)
microbenchmark(preallocate(10000), times = 5)
x <- 1:10
print(names(x))
for (i in names(x)) {
print(i)
print(x[[i]])
}
show_mean(iris)
irirs
iris
show_mean(iris)
?str_pad
1L
?str_c
?str_pad
str_pad("hadley", 30, "left")
show_mean <- function(df, digits = 2){
# To format the output, we need to know the length of the
# names of each column in the dataset
longest <- max(str_length(names(df)))
# Write the for loop
for(i in names(df)){
# check if the data values are numeric, so can compute mean
if(is.numeric(df[[i]])){
# Use cat() function
cat(str_c(
str_pad(str_c(i, ":"), longest+1, "right"),
format(mean(df[[i]]), digits = digits, nsmall = digits),
sep = " "
), "\n")
}
}
}
show_mean(iris)
?apply
test <- c(TRUE, TRUE, FALSE, TRUE)
x <- seq_along(test)
x
?col_summary
col_summary
is_numeric <- vector("logical", length(iris))
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
index <- seq_along(iris)[[is_numeric]]
index
index <- seq_along(iris)[is_numeric]
index
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
}
index <- seq_along(iris)[is_numeric]
index
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
}
index <- seq_along(iris)[is_numeric]
index
is_numeric
is_numeric <- vector("logical", length(iris))
is_numeric
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
}
index <- seq_along(iris)[is_numeric]
index
iris
iris
