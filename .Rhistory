ymd(20181204, tz = "CST")
ymd(20181204, tz = "UTC")
nycflights13::flights
flights %>% select(
year, month, day, hour, minute
)
flights <- nycflights13::flights
flights %>% select(
year, month, day, hour, minute
)
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_date(year, month, day, hour, minute))
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_datetime(year, month, day, hour, minute))
make_datetime_100 <- function(year, month, day, time){
make_datetime(year, month, day, time%/%100, time%%100)
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
flights_dt %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600) # 600 = 10 min
as_datetime(today())
as_date(now())
as_datetime(60 * 60 * 10)
as_date(365 * 10 + 2)
ymd(c(20101010, "banana"))
?today
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
mdy(d1)
ymd(d2)
dmy(d3)
mdy(d4)
ydm(d5)
mdy(d5)
datetime <- ymd_hms(20160708 12:34:56)
datetime <- ymd_hms("20160708 12:34:56")
datetime
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
month(datetime, label = TRUE)
wday(datetime, abbr = FALSE)
wday(datetime, label = TRUE, abbr = FALSE)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) %>%
geom_bar()
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
sched_dep <- flights_dt %>%
mutate(minute = minute(sched_dep_time)) %>%
group_by(minute) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE),
n = n())
ggplot(sched_dep, aes(minute, avg_delay)) +
geom_line()
ggplot(sched_dep, aes(minute, n)) +
geom_line()
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(week, n)) +
geom_line()
datetime <- ymd_hms(20160708 12:34:56)
datetime <- ymd_hms("20160708 12:34:56")
datetime
year(datetime) <- 2020
datetime
month(datetime) <- 12
datetime
day(datetime) <- 04
datetime
update(datetime, year = 2020, month = 12, mday = 4, hour = 0)
ymd(20150101)
ymd(20150201) %>%
update(mday = 31)
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
ggplot(aes(dep_hour)) +
geom_freqpoly(binwidth = 300)
flights_dt %>%
mutate(time = hour(dep_time) * 100 + minute(dep_time),
month_number = as.factor(month(dep_time))) %>%
ggplot(aes(x = time, color = month_nmber, group = month_number)) +
geom_freqpoly(binwidth = 100)
flights_dt %>%
mutate(time = hour(dep_time) * 100 + minute(dep_time),
month_number = as.factor(month(dep_time))) %>%
ggplot(aes(x = time, color = month_number, group = month_number)) +
geom_freqpoly(binwidth = 100)
flights_dt %>%
mutate(time = hour(dep_time) * 100 + minute(dep_time),
month_number = as.factor(month(dep_time))) %>%
ggplot(aes(x = time, y = ..density.., color = month_number, group = month_number)) +
geom_freqpoly(binwidth = 100)
View(flights_dt)
?flights
View(flights)
flights_dt %>%
mutate(dep_time_ = sched_dep_time + dep_delay) %>%
filter(dep_time_ != dep_time) %>%
select(dep_time_, dep_time, sched_dep_time, dep_delay)
flights_dt %>%
mutate(flight_time = as.numeric(arr_time - dep_time),
air_time_minutes = air_time,
difference = flight_time - air_time_minutes) %>%
select(oririn, dest, flight_time, air_time_minutes, difference)
flights_dt %>%
mutate(flight_time = as.numeric(arr_time - dep_time),
air_time_minutes = air_time,
difference = flight_time - air_time_minutes) %>%
select(origin, dest, flight_time, air_time_minutes, difference)
flights_dt %>%
mutate(dep_hour = hour(sched_dep_time)) %>%
group_by(dep_hour) %>%
summarise(dep_delay = mean(dep_delay)) %>%
ggplot(aes(x = dep_hour, y = dep_delay)) +
geom_point() +
geom_smooth()
flights_dt %>%
mutate(dayofweek = wday(sched_dep_time)) %>%
group_by(dayofweek) %>%
summarise(dep_delay = mean(dep_delay, na.rm =TRUE),
arr_delay = mean(arr_delay, na.rm =TRUE))
flights_dt %>%
mutate(dayofweek = wday(sched_dep_time, label = TRUE)) %>%
group_by(dayofweek) %>%
summarise(dep_delay = mean(dep_delay, na.rm =TRUE),
arr_delay = mean(arr_delay, na.rm =TRUE))
flights_dt %>%
mutate(dayofweek = wday(sched_dep_time, label = TRUE, abbr = FALSE)) %>%
group_by(dayofweek) %>%
summarise(dep_delay = mean(dep_delay, na.rm =TRUE),
arr_delay = mean(arr_delay, na.rm =TRUE))
ggplot(diamonds, aes(x = carat)) +
geom_density()
ggplot(flights_dt, aes(minute(sched_dep))) +
geom_histogram(binwidth = 1)
ggplot(flights_dt, aes(x = minute(sched_dep_time))) +
geom_histogram(binwidth = 1)
ggplot(diamonds, aes(x = carat)) +
geom_histogram()
ggplot(diamonds, aes(x = carat %% 1 * 100)) +
geom_histogram()
ggplot(diamonds, aes(x = carat %% 1 * 100)) +
geom_histogram(binwidth = 1)
flights_dt %>%
mutate(early = dep_delay < 0,
minute = minute(sched_dep_time)) %>%
group_by(minute) %>%
summarise(early = mean(early)) %>%
ggplot(aes(x = minute, y = early)) +
geom_point()
flights_dt %>%
mutate(early = dep_delay < 0,
minute = minute(sched_dep_time)) %>%
group_by(minute(sched_dep_time%%10)) %>%
summarise(early = mean(early)) %>%
ggplot(aes(x = minute, y = early)) +
geom_point()
flights_dt %>%
mutate(early = dep_delay < 0,
minute = minute(sched_dep_time)%%10) %>%
group_by(minute(sched_dep_time)) %>%
summarise(early = mean(early)) %>%
ggplot(aes(x = minute, y = early)) +
geom_point()
flights_dt %>%
mutate(early = dep_delay < 0,
minute = minute(sched_dep_time)%%10) %>%
group_by(minute(sched_dep_time)) %>%
summarise(early = mean(early)) %>%
ggplot(aes(x = minute, y = early)) +
geom_point()
flights_dt %>%
mutate(early = dep_delay < 0,
minute = minute(sched_dep_time) %% 10) %>%
group_by(minute) %>%
summarise(early = mean(early)) %>%
ggplot(aes(x = minute, y = early)) +
geom_point()
n_age <- today() - ymd(19901204)
n_age
as.duration(n_age)
dseconds(15)
dminutes(10)
dhours(c(12,24))
ddays(0:5)
dweeks(3)
dyears(1)
2 * dyears(1)
dyears(1) + dweeks(15) + ddays(13)
tomorrow <- today() + ddays(1)
tomorrow
last_year <- today - dyears(1)
last_year <- today() - dyears(1)
last_year
one_pm <- ymd_hms("20180312 13:00:00")
one_pm <- ymd_hms("20180312 13:00:00",
tz = "America/New York")
one_pm
one_pm + ddays(1)
one_pm
one_pm + days(1)
seconds(15)
minutes(10)
hours(c(12,24))
days(7)
months(1:6)
weeks(3)
years(1)
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)
ymd(20160101) + dyears(1)
ymd(20160101) + years(1)
one_pm + ddays(1)
one_pm + days(1)
flights_dt %>%
filter(arr_time < dep_time)
flights_dt %>%
mutate(overnight = arr_time < dep_time,
arr_time = arr_time + days(overnight * 1),
sched_arr_time = sched_arr_time + days(overnight * 1))
TRUE * 1
FALSE * 1
dyears(1) / ddays(365)
years(1) / days(1)
next_year <- today() + years(1)
(today() %--% next_year) / ddays(1)
(today() %--% next_year) %/% days(1)
today() %--% next_year
today() %--% today()
ymd(20150101) + months(0:11)
ymd(20150101) + months(1)
today()
floor_date(today(), unit = "year")
floor_date(today(), unit = "year") + months(0:11)
ymd(20150101) + months(1) + months(2)
ymd(20150101) + months(1:2)
ymd(20150101) + months(0:11)
ymd(20150101) + months(1:2)
age <- function(birthday){
(birthday %--%today()) %/% years(1)
}
next_year <- today() + years(1)
next_year
today() %--% next_year
age(ymd(19901204))
(today() %--% (today() + years(1)) / months(1)
(today() %--% (today() + years(1))) %/% months(1)
(today() %--% (today() + years(1))) / months(1)
next_year <- today() + years(1)
next_year
today() %--% next_year
today() %--% next_year %/% years(1)
today() %--% next_year %/% months(1)
Sys.timezone()
length(OlsonNames())
head(OlsonNames())
library(tidyverse)
(x - rng[1]) / (rng[2] - rng[1])
rescale01_test <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01_test <- function(x) {
rng <- range(x, na.rm = FALSE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01_test(c(0, 5, , NA, 10))
rescale01_test(c(0, 5, NA, 10))
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
y <- (x - rng[1]) / (rng[2] - rng[1])
y[y == -Inf] <- 0
y[y == Inf] <- 1
y
}
rescale01(c(Inf, -Inf, 0:5, NA))
na_proportion <- function(x){
mean(is.na(x))
}
na_proportion(c(NA, 1, NA, 2, NA, 3, NA, 4))
weighting <- function(x){
x / sum(x, na.rm = TRUE)
}
test <- weighting(0:6)
test
sum(test)
coeff_var <- function(x){
sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)
}
test3 <- coeff_var(c(1,2,3,4,5,6,7,8,9,14))
test3
variance <- function(x) {
# remove missing values
x <- x[!is.na(x)]
n <- length(x)
m <- mean(x)
sqError <- (x - m) ^ 2
sum(sqError) / (n - 1)
}
variance(1:100)
var(1:100)
a <- c(NA, 1, 2, 3, 4, NA)
count(is.na(a))
is.na(a)
count(a, NA)
TRUE & FALSE
sum(TRUE & FALSE, TRUE&TRUE, FALSE&FALSE)
sum(TRUE, FALSE, FALSE)
sum(FALSE, FALSE, FALSE)
both_na <- function(x, y){
sum(is.na(x) & is.na(y))
}
x <- c(NA, NA, NA, 2, 4)
y <- c(1, NA, NA, 2, 2)
both_na(x, y)
skew <- function(x){
x <- x[!is.na(x)]
n <- length(x)
m <- mean(x)
upper <- sum((x - m)^3)/n
lower <- sqrt(sum((x - m)^2)/(n-1))^3
upper / lower
}
skew(rgamma(10, 1, 1))
is_directory <- function(x) file.info(x)$isdir
is_readable <- function(x) file.access(x, 4) == 0
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix
}
f1(c("str_c", "str_foo", "abc"), "str_")
f2 <- function(x) {
if (length(x) <= 1) return(NULL)
x[-length(x)]
}
f2(c(1,2,3,4,5))
?rep
?length.out
?rep
f3 <- function(x, y) {
rep(y, length.out = length(x))
}
x <- c(1,2,3,4,5,6,7,8,9)
y <- c(1,2,3,4,5)
f3(y, x)
f3(x, y)
f3(1:3, 9)
?rnorm
rep(FALSE, 3)
?ifelse
greeting <- function(time = lubridate::now()){
hour <- hour(time)
if(hour < 12){
print("Good Morning")
}else if(hour < 17){
print("Good Afternoon")
}else{
print("Good Evening")
}
}
greeting
greeting()
9 %% 3
! 9 %% 3
!(15 %% 3) & !(15 %% 5)
!15%%3
!!15%%3
fizzbuzz <- function(x){
stopifnot(length(x) == 1)
stopifnot(is.numeric(x))
if(!(x %% 3) & !(x %% 5)){
print("fizzbuzz")
}else if(! (x %% 3)){
print("fizz")
}else if(! (x %% 5)){
print("buzz")
}
}
fizzbuzz(9)
fizzbuzz(20)
fizzbuzz(15)
?cut
cut(temperature, c(-Inf, 0, 10, 20, 30, Inf), right = TRUE, labels = c("freezing", "cold", "cool", "warm", "hot"))
cut(x, c(-Inf, 0, 10, 20, 30, Inf), right = TRUE, labels = c("freezing", "cold", "cool", "warm", "hot"))
temp = c(-30, 5, 10, 15, 20, 25, 30, 35, 100)
cut(temp)
x = c(-30, 5, 10, 15, 20, 25, 30, 35, 100)
cut(x, c(-Inf, 0, 10, 20, 30, Inf), right = TRUE, labels = c("freezing", "cold", "cool", "warm", "hot"))
?switch
switch(3, "one", "two", "three")
switch(4, "one", "two", "three")
switch(2, "one", "two", "three")
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
?mean
library(tidyverse)
library(purrr)
test <- c(0, -Inf, Inf, NA, NaN)
is.finite(test)
!is.infinite(test)
?dplyr::near
dplyr::near
?.Machine
x <- (NA, 2, 4, 6, 7)
is.na(x)
x <- c(NA, 2, 4, 6, 7)
is.na(x)
mean(is.na(x))
is.finite(x)
sum(is.finite(x))
?is.vector
?is.atomic
?setNames
setNames(c(1, 2, 4), c("one", "two", "four"))
?purrr::set_names
set_names(1:4, c("a", "b", "c", "d"))
set_names(1:4, letters[1:4])
set_names(1:4, "a", "b", "c", "d")
last_element <- function(x){
if(length(x) > 0){
x[[length(x)]]
}else{
x
}
}
last_element(c(1:20))
last_element(1)
last_element(numeric())
?seq_along
seq(0, 1, length.out = 11
seq(0, 1, length.out = 11)
test <- c(1,2,3,4,5,6,7,8)
seq_along(test) %% 2
input <- (seq_along(test) %% 2 == 0)
input
test[input]
seq_along(test)
input2 <- (test[] %% 2 == 0)
input2
even_position <- function(x){
if(length(x) > 0){
test[test[] %% 2 == 0]
}else{
x
}
}
even_position(test)
except_last <- function(x){
if(length(x) > 0){
x[-length(x)]
}else{
x
}
}
except_last(test)
test %% 2
TRUE & 1
TRUE & 0
only_even <- function(x){
x[!(is.na(x) & (x %% 2 == 0))]
}
only_even(test)
x[(!is.na(x) & (x %% 2 == 0))]
only_even <- function(x){
x[(!is.na(x) & (x %% 2 == 0))]
}
only_even(test)
test[-which(test > 0)]
which(test > 0)
test[-c(1,2,3,4)]
test[test <= 0]
test
test[10]
