# Question 2.3
model3 <- lm(wage ~ exper + expersq + educ + female + nonwhite, data = wage1)
summary(model3)
uhat <- model3$residuals
cor(uhat, wage1[c("exper", "educ", "female", "nonwhite")])
# Question 2.3
model3 <- lm(wage ~ exper + expersq + educ + female + nonwhite, data = wage1)
summary(model3)
uhat <- model3$residuals
cor(uhat, wage1[c("exper", "expersq", "educ", "female", "nonwhite")])
cor(model3$fitted.values, wage1$wage)
result <- cor(model3$fitted.values, wage1$wage)
result^2
wage1$wage2-hat <- exp(model1$fitted.values)*B2
B1 <- exp(0.4138^2/2) # the residual std. error
B1
B2 <- mean(exp(model2$residuals)) # Duan's (1983) approach
B2
wage1$wage2-hat <- exp(model1$fitted.values)*B2
wage1$wage2hat <- exp(model1$fitted.values)*B2
wage1$wage2hat <- exp(model1$fitted.values)*1.009537
cor(wage1$wage, wage1$wage2hat)
wage1$wage2hat <- exp(model1$fitted.values) * 1.009537
wage2hat <- exp(model1$fitted.values) * 1.009537
cor(wage1$wage, wage2hat)
wage2hat
library(utils)
utils::adist()
utils::adist(sitting, kitten)
x <- c(s,i,t,t,i,n,g)
x <- c("s,i,t,t,i,n,g")
x
y <- c("k,i,t,t,e,n")
utils::adist(x, ky)
utils::adist(x, y)
x <- "sitting"
x
y <- "kitten"
utils::adist(x, y)
help(utils::adist)
help(utils)
"utils"
help(adist)
utils::adist(x, y, costs = (1,1,2))
utils::adist(x, y, costs = c(1,1,2))
utils::adist(x, y, costs = list(i=1,d=1,s=2))
install.packages("TraMineR")
library(TraMineR)
library(gganimate)
library(httr)
set_config(config(ssl_verifypeer = 0L))
library(devtools)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("dgrtwo/gganimate")
shareimprove this answer
library(bitops)
library(devtools)
library(gganimate)
library(devtools)
library(devtools)
library(RCurl)
library(httr)
install.packages("bitops")
install.packages("bitops")
library(devtools)
library(RCurl)
library(bitops)
library(RCurl)
library(httr)
library(gganimate)
gganimate::gganimate(p)
library(TraMineR)
seqdef(rbind("s-i-t-t-i-n-g","k-i-t-t-e-n"))
d1 <- seqdef(rbind("s-i-t-t-i-n-g","k-i-t-t-e-n"))
seqdist(d1, method = "OM", indel = 1, sm = "CONSTANT")
seqplot(d1)
dur <- read.csv("http://nb.vse.cz/~zouharj/econ/durgoods.csv")
head(dur)
plot(dur$dish)
plot(dur$dish, type = "b")
plot(dur$frig, type = "b")
dur$year <- seq(from=1978, to=1987.75, by=0.25)
dur$year <- seq(from=1978, to=1985.75, by=0.25)
plot(dur$frig ~ dur$year, type = "b")
dur$quarter <- 1:4
model1 <- lm(dish ~ quarter, data = dur)
summary(model1)
plot(dur$dish, type = "b")
line(model1$fitted.values)
plot(dur$dish, type = "b")
lines(model1$fitted.values)
dur$quarter <- factor(1:4)
model1 <- lm(dish ~ quarter, data = dur)
summary(model1)
plot(dur$dish, type = "b")
lines(model1$fitted.values)
model2 <- lm(frig ~ quarter, data = dur)
summary(model2)
model2 <- lm(frig ~ quarter, data = dur)
summary(model2)
plot(dur$frig, type = "'b")
lines(model2$fitted.values)
model2 <- lm(frig ~ quarter, data = dur)
summary(model2)
plot(dur$frig, type = "'b")
lines(model2$fitted.values)
plot(dur$frig, type = "'b")
lines(model2$fitted.values)
model2 <- lm(frig ~ quarter, data = dur)
summary(model2)
plot(dur$frig, type = "b")
lines(model2$fitted.values)
model3 <- lm(frig ~ quarter + year + I(year^2), data = dur)
summary(model3)
model3 <- lm(frig ~ quarter + year + I(year^2), data = dur) # if not creating new variable, use I() function to square
summary(model3)
plot(dur$frig, type = "b")
lines(model3$fitted.values)
plot(dur$frig, type = "b", xlab = "Quarter", ylab = "Sales of Fridges", main = "Seasonality of Fridges Sales")
plot(dur$frig, type = "b", xlab = "Quarter", ylab = "Sales of Fridges", main = "Seasonality of Fridges Sales")
lines(model3$fitted.values)
dur$frig_adjusted <- model3$residuals
plot(dur$frig_adjusted, type = "b")
dur$frig_adjusted <- model3$residuals + mean(dur$frig)
plot(dur$frig_adjusted, type = "b")
lines(dur$frig)
anova(model3, lm(frig ~ year + I(year^2), data = dur))
model4 <-- lm(log(frig) ~ quarter, data = dur)
summary(model4)
model4 <- lm(log(frig) ~ quarter, data = dur)
summary(model4)
exp(model4$coefficients) # To exponentiate and get the factors of multiplication
dt <- read.csv("http://nb.vse.cz/~zouharj/econ/fertil3.csv")
desc <- read.csv("http://nb.vse.cz/~zouharj/econ/fertil3_desc.csv")
View(desc)
head(dt)
head(dt, n=10)
head(dt[,c("pe","pe_1","")], n=10)
head(dt[,c("pe","pe_1","pe_2","pe_3")], n=10)
tail(dt[,c("pe","pe_1","pe_2","pe_3")], n=10)
head(dt[,c("year","pe","pe_1","pe_2","pe_3")], n=10)
tail(dt[,c("year","pe","pe_1","pe_2","pe_3")], n=10)
plot(dt$ww2, type = "b")
plot(dt$ww2 ~ dt$year, type = "b")
plot(dt$ww2 ~ dt$year, type = "b", xlab="Year", ylab="WW2")
model5 <- lm(gfr ~ year, data = dt)
summary(model5)
plot(gfr ~ year, data = dt, type = "b")
lines(model5$fitted.values)
plot(gfr ~ year, data = dt, type = "b", xlab = "Year", ylab = "General Fertility Rate", main = "Model 5 Fertility on Years")
plot(dt$gfr, type = "b", xlab = "Year", ylab = "General Fertility Rate", main = "Model 5 Fertility on Years")
lines(model5$fitted.values)
model6 <- lm(gfr ~ year + ww2 + pill, data=dt)
summary(model6)
model6 <- lm(gfr ~ year + ww2 + pill, data=dt)
summary(model6)
plot(dt$gfr, type = "b")
lines(model6$fitted.values)
plot(dt$gfr, type = "b", xlab = "Year", ylab = "General Fertility Rate", main = "Model 5 Fertility on Years")
lines(model6$fitted.values)
plot(dt$gfr, type = "b", xlab = "Year", ylab = "General Fertility Rate", main = "Model 6 Fertility on Years")
lines(model6$fitted.values)
model7 <- lm(gfr ~ year + ww2 + pill + pe + pe_1 + pe_2, data=dt)
summary(model7)
plot(dt$gfr, type = "b", xlab = "Year", ylab = "General Fertility Rate", main = "Model 7 Fertility on Years")
lines(model7$fitted.values)
anova(model6, model7) # F-test for pe, pe_1, and pe_2
model6_fix <- lm(gfr ~ year + ww2 + pill, data=dt[-c(1,2),])
summary(model6_fix)
plot(dt$gfr, type = "b", xlab = "Year", ylab = "General Fertility Rate", main = "Model 6_fix Fertility on Years")
lines(model6_fix$fitted.values)
anova(model6_fix, model7)
library(car)
library(car)
linearHypothesis(model7, c("pe","pe_1"."pe_2"))
linearHypothesis(model7, c("pe","pe_1","pe_2"))
okun2 <- read.csv("okun2.csv", sep = ";")
library(readr)
automobile_market <- read_csv("C:/Users/nade/Desktop/Intro Econometrics/Excel Data/automobile_market.csv")
View(automobile_market)
library(readr)
labour_market <- read_csv("C:/Users/nade/Desktop/Intro Econometrics/Excel Data/labour_market.csv")
View(labour_market)
at <- automobile_market
1990-1975
15*12
180+10
1/12
0.08333333*10
at$year <- seq(from=1975, to=1991.83333, by=0.083333)
at$year <- seq(from=1975.083333, to=1991.83333, by=0.083333)
head(at)
View(at)
at$month <- 1:12
at$month <- 1:12[-2]
View(at)
at$month <- seq(1:12,length.out = 202)
at$month <- 1:12
View(at)
help("seq")
help("repeated number")
help("month dummy")
help("repeat number")
help("seq_len")
at$month <- 1:12
automobile_market$month <- 1:12
at$month <- 1:12
dur <- read.csv("http://nb.vse.cz/~zouharj/econ/durgoods.csv")
dur$year <- seq(from=1978, to=1985.75, by=0.25)
at$month <- 1:12
help("seq_along")
at$month <- 1:12
at$month1 <- 1:12
help("rep")
at$month <- rep(1:12,202)
at$month <- rep(1:12)
at$month <- rep(1:12, length.out=202)
head(at)
View(at)
View(at)
model1 <- lm(log(carexp)~year + month, data = at)
summary(model1)
help(bgtest)
check1 <- lm(log(carexp)~year, data=at)
summary(check1)
model1 <- lm(log(carexp)~year + month, data = at)
summary(model1)
model2 <- lm(log(carexp)~month, data=at)
summary(model2)
anova(model1,model2)
model1 <- lm(log(carexp)~year + month, data = at)
summary(model1)
plot(at$carexp~at$year, type="b")
model3 <- lm(log(carexp)~year, data=at)
summary(model3)
anova(model1, model3)
library(car)
linearHypothesis(model1, "year")
linearHypothesis(model1, "month")
lag <- function(series){
n <- length(series)
lagged_series <- c(NA, series[-n])
return(lagged_series)
}
n <- nrow(at)
at$unemp_lag1 <- c(NA, at$unemp[-n])
at$unemp_lag2 <- c(NA, at$at$unemp_lag1[-n])
lag <- function(series){
n <- length(series)
lagged_series <- c(NA, series[-n])
return(lagged_series)
}
n <- nrow(at)
at$unemp_lag1 <- c(NA, at$unemp[-n])
at$unemp_lag2 <- c(NA, at$at$unemp_lag1[-n])
View(at)
lag <- function(series){
n <- length(series)
lagged_series <- c(NA, series[-n])
return(lagged_series)
}
n <- nrow(at)
at$unemp_lag1 <- c(NA, at$unemp[-n])
at$unemp_lag2 <- c(NA, at$unemp_lag1[-n])
View(at)
lm(log(carexp)~unemp + unemp_lag1 + unemp_lag2 + year, data=at)
q1d <- lm(log(carexp)~unemp + unemp_lag1 + unemp_lag2 + year, data=at)
summary(q1d)
options(scipen = 5)
q1d <- lm(log(carexp)~unemp + unemp_lag1 + unemp_lag2 + year, data=at)
summary(q1d)
exp(q1d$coefficients)
exp(q1d$coefficients)-1
at$carexp_adjusted <- model1$residuals
q1e <- lm(log(carexp_adjusted)~unemp + unemp_lag1 + unemp_lag2 + year, data=at)
summary(q1e)
q1f<-lm(unemp~unemp_lag1,data=at)
summary(q1f)
library(orcutt)
model_CO <- cochrane.orcutt(q1e)
summary(model_CO)
confint(model_CO$coefficients)
confint(model_CO)
help("orcutt")
help("cochrane.orcutt")
help("confint")
confint(model_CO,vcov(model_CO))
confint(model_CO)
confint(model_CO)["(unemp)",]
confint(model_CO)
model_CO <- cochrane.orcutt(q1e)
summary(model_CO)
exp(model_CO$coefficients)-1
0.139232-1.96*0.248314
0.139232+1.96*0.248314
q1e <- lm(log(carexp_adjusted)~unemp + unemp_lag1 + unemp_lag2 + year, data=at)
summary(q1e)
model_CO <- cochrane.orcutt(q1e)
summary(model_CO)
lm(log(carexp)~year,data=at)
q1j <- lm(log(carexp)~year,data=at)
summary(q1j)
at$lced <- q1j$residuals
View(at)
at$lced_lag1 <- c(NA, at$lced[-n])
head(at)
lm(lced~lced_lag1,data=at)
q1k <- lm(lced~lced_lag1,data=at)
summary(q1k)
confint(q1k)
lmar <- labour_market
modelQ3 <- lm(wage ~ ., data=lmar)
summary(modelQ3)
library(lmtest)
library(sandwich)
bptest(modelQ3)
vcov_robust <- vcovHC(modelQ3)
vcov_robust
stdErr_robust <- sqrt(diag(vcov_robust))
stdErr_robust
#Calculate the conventional standard error
#Just delete the HC in the vcovHC, so to get the conventional standarrd errors
vcov_conventional <- vcov(modelQ3)
stdErr_conventional <- sqrt(diag(vcov_conventional))
rbind(stdErr_conventional, stdErr_robust)
# Ways to display results with std errors
coeftest(modelQ3, vcov = vcov_robust)
# To see the confidence invertals
# 95% CI based on robust std. errors
confint(modelQ3, vcov = vcov_robust)
library(stargazer)
stargazer(
modelQ3, modelQ3, se = list(NULL, stdErr_robust), type = "text"
)
modelQ3 <- lm(wage ~ ., data=lmar)
summary(modelQ3)
help("one-tail")
help("hypothesis")
help(normal distribution)
0.02554*2
lmar$femaleXmarried <- lmar$female*lmar$married
model3b <- lm(wage~.,data=lmar)
summary(model3b)
bgtest(model3b)
confint(model3b)
linearHypothesis(model1, "femaleXmarried=0")
c(18,0,1,0,0,1,0,0)*model3b$coefficients
c(1,18,0,1,0,0,1,0,0)*model3b$coefficients
sum(1,18,0,1,0,0,1,0,0)*coef(model3b))
sum(18,0,1,0,0,1,0,0)*coef(model3b))
sum(c(18,0,1,0,0,1,0,0)*coef(model3b))
sum(c(1,18,0,1,0,0,1,0,0)*coef(model3b))
sum(c(1,18,0,1,0,0,1,0,0)*coef(model3b))
-20.7526029+18*1.7411167+1.8864791+1.9940948
-20.7526029+18*1.7411167+1.8864791+1.9940948
sum(-20.7526029+18*1.7411167+1.8864791+1.9940948)
library(dplyr)
library(ggplot2)
```{r, echo=FALSE}
```{r, echo=FALSE}
library(purrr)
# install.packages("tidyverse")
setwd("C:/Users/nade/Desktop/Data Analysis R")
### LOAD PACKAGE ###
library(tidyverse)
ggplot(data = diamonds) +
geom_abline(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds %>%
count(cut)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
diamonds %>%
count(cut_width(carat, 0.5))
smaller <- diamonds %>%
filter(carat < 3)
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.01)
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0,50))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 0.5)
View(smaller)
View(smaller)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 0.1)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 5)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 10)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 100)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 1000)
diamonds %>%
count(cut_width(price, 100))
ninetynine <- diamonds %>%
filter(carat == 0.99)
ninetynine <- diamonds %>%
filter(carat == 0.99) %>%
summarize(ninetyninecarat =  n())
ninetynine
View(ninetynine)
one <- diamonds %>%
filter(carat == 1)
one
one %>%
summarize(count = n())
q4test <- ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 100)
q4test1 <- ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 100) +
coord_cartesian(ylim = c(0, 200))
q4test1
q4test2 <- ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 100) +
coord_cartesian(xlim = c(0, 10000))
q4test2 # It shows only from 0 to 10000 on x-axis
q4test3 <- ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram()
q4test3 # It shows only from 0 to 200 on y-axis
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point()
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point(na.rm = TRUE)
? histogram missing
? histogram
View(diamonds2)
View(diamonds2)
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds,mapping = aes(x = price, y = ..density..)) +
geom_freqpoly(mapping = aes(color = cut), binwidth = 500)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot(mapping = aes(color = cut))
diamonds_boxplot <- ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot(mapping = aes(color = cut)) +
ggtitle(expression(atop("Diamonds Prices Separated", "by Various Cuts"))) +
xlab("Cut (Quality") +
ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 14),
title = element_text(size = 16))
diamonds_boxplot <- ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot(mapping = aes(color = cut)) +
ggtitle(expression(atop("Diamonds Prices Separated", "by Various Cuts"))) +
xlab("Cut (Quality") +
ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 14),
title = element_text(size = 16))
png("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_diamonds_cut_boxplot.png")
diamonds_boxplot
pdf("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_diamonds_cut_boxplot.pdf")
diamonds_boxplot
dev.off()
mpg_boxplot <- ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(mapping = aes(color = class)) +
ggtitle(expression(atop("Cars Highway Miles Per Gallon", "by Various Classes"))) +
xlab("Class") +
ylab("Highway Miles Per Gallon") +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 14),
title = element_text(size = 16))
png("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_class_boxplot.png")
mpg_boxplot
pdf("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_class_boxplot.pdf")
mpg_boxplot
dev.off()
mpg_boxplot
mpg_boxplot <- ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(mapping = aes(color = class)) +
ggtitle(expression(atop("Cars Highway Miles Per Gallon", "by Various Classes"))) +
xlab("Class") +
ylab("Highway Miles Per Gallon") +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 10),
title = element_text(size = 16))
png("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_class_boxplot.png")
mpg_boxplot
pdf("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_class_boxplot.pdf")
mpg_boxplot
dev.off()
mpg_boxplot
mpg_boxplot <- ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(mapping = aes(color = class)) +
ggtitle(expression(atop("Cars Highway Miles Per Gallon", "by Various Classes"))) +
xlab("Class") +
ylab("Highway Miles Per Gallon") +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 10),
title = element_text(size = 14))
png("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_class_boxplot.png")
mpg_boxplot
pdf("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_class_boxplot.pdf")
mpg_boxplot
dev.off()
mpg_boxplot
