library(ggplot2)
setwd("C:/Users/nade/Desktop/Data Analysis R")
### Source the cleaning script ###
source("scripts/rcourse_lesson3_cleaning.R")
### LOAD PACKAGES ###
library(ggplot2)
View(data_clean)
data_figs <- data_clean %>%
mutate(allstar_break <- factor(allstar_break, levels = c("before", "after"))
data_figs <- data_clean %>%
mutate(allstar_break <- factor(allstar_break, levels = c("before", "after")))
setwd("C:/Users/nade/Desktop/Data Analysis R")
### QUESTIONS ###
# 1. Full season: did the Giants win more games before or after the All-star break?
# 2. Buster Posey: Are the Giants more likely to win in games where Buster Posey
# was walked at least once?
### LOAD PACKAGES ###
library(dplyr)
### READ IN DATA ###
# READ FULL SEASON DATA
data <- read.table("data/rcourse_lesson3_data.txt", header = T, sep = "\t")
# READ PLAYER BUSTER POSEY DATA
data_posey <- read.table("data/rcourse_lesson3_data_posey.txt", header = T, sep = "\t")
### CLEANING DATA ###
# We want columns that refer to the Giants and their opponents
# We start making a column for whether Giants were the home or visiting team
# To make this column, we need mutate() method and ifelse() method
# Giant's home stadium is "SFN", this is the condition
# We write either home or visitor
### Add column to full season data to make data set specific to the Giants
data_clean <- data %>%
mutate(home_visitor <- ifelse(home_team == "SFN", "home","visitor")) %>%
# Since we asked whether time was before or after All-Star break
# we need to make a column whether a game was before or after All-Star break
# the date of All-Star was July 13, 2010, data has YYYYMMDD format
# We use another mutate() and ifelse() methods
mutate(allstar_break <- ifelse(date < 20100713, "before", "after")) %>%
# The last column we make is for the dependent variable for our logistic regression
# A series of ifelse() statements to determine:
# 1. The Giants were home team or not
# 2. The home team or the visitor scored more runs
# If the first is true, Giants home and scored more, we use 1
# If the Giants were away, and home team scored fewer, we use also 1
# Any other situation will be given 0
mutate(win <- ifelse(home_team=="SFN" & home_score > visitor_score, 1,
ifelse(visitor_team=="SFN" & home_score < visitor_score, 1, 0))) %>%
# Make columns for Giants stats
mutate(giants_hits <- ifelse(home_team=="SFN", home_hits, visitor_hits)) %>%
mutate(giants_pitchers_used <- ifelse(home_team=="SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(giants_errors <- ifelse(home_team=="SFN", home_errors, visitor_errors)) %>%
# Make columns for other team stats
mutate(other_hits <- ifelse(home_team != "SFN", home_hits, visitor_hits)) %>%
mutate(other_pitchers_used <- ifelse(home_team != "SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(other_errors <- ifelse(home_team != "SFN", home_errors, visitor_errors)) %>%
# Make a column for game number
arrange(date) %>%
mutate(game_number <- row_number())
### Combine cleaned full-season data with Posey's
data_posey_clean <- data_posey %>%
# Join with full season data
inner_join(data_clean) %>%
# Make a column for if walked or not
mutate(walked <- ifelse(walks > 0, "yes", "no"))
# Check data
dim(data_posey)
dim(data_posey_clean)
setwd("C:/Users/nade/Desktop/Data Analysis R")
### Source the cleaning script ###
source("scripts/rcourse_lesson3_cleaning.R")
### LOAD PACKAGES ###
library(ggplot2)
# Change order level of variable for figure
data_figs <- data_clean %>%
mutate(allstar_break <- factor(allstar_break, levels = c("before", "after")))
data_figs <- data_clean %>%
mutate(allstar_break <- factor(allstar_break, levels = c("before", "after")))
View(data_clean)
setwd("C:/Users/nade/Desktop/Data Analysis R")
### QUESTIONS ###
# 1. Full season: did the Giants win more games before or after the All-star break?
# 2. Buster Posey: Are the Giants more likely to win in games where Buster Posey
# was walked at least once?
### LOAD PACKAGES ###
library(dplyr)
### READ IN DATA ###
# READ FULL SEASON DATA
data <- read.table("data/rcourse_lesson3_data.txt", header = T, sep = "\t")
# READ PLAYER BUSTER POSEY DATA
data_posey <- read.table("data/rcourse_lesson3_data_posey.txt", header = T, sep = "\t")
### CLEANING DATA ###
# We want columns that refer to the Giants and their opponents
# We start making a column for whether Giants were the home or visiting team
# To make this column, we need mutate() method and ifelse() method
# Giant's home stadium is "SFN", this is the condition
# We write either home or visitor
### Add column to full season data to make data set specific to the Giants
data_clean <- data %>%
mutate(home_visitor <- ifelse(home_team == "SFN", "home","visitor")) %>%
# Since we asked whether time was before or after All-Star break
# we need to make a column whether a game was before or after All-Star break
# the date of All-Star was July 13, 2010, data has YYYYMMDD format
# We use another mutate() and ifelse() methods
mutate(allstar_break = ifelse(date < 20100713, "before", "after")) %>%
# The last column we make is for the dependent variable for our logistic regression
# A series of ifelse() statements to determine:
# 1. The Giants were home team or not
# 2. The home team or the visitor scored more runs
# If the first is true, Giants home and scored more, we use 1
# If the Giants were away, and home team scored fewer, we use also 1
# Any other situation will be given 0
mutate(win <- ifelse(home_team=="SFN" & home_score > visitor_score, 1,
ifelse(visitor_team=="SFN" & home_score < visitor_score, 1, 0))) %>%
# Make columns for Giants stats
mutate(giants_hits <- ifelse(home_team=="SFN", home_hits, visitor_hits)) %>%
mutate(giants_pitchers_used <- ifelse(home_team=="SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(giants_errors <- ifelse(home_team=="SFN", home_errors, visitor_errors)) %>%
# Make columns for other team stats
mutate(other_hits <- ifelse(home_team != "SFN", home_hits, visitor_hits)) %>%
mutate(other_pitchers_used <- ifelse(home_team != "SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(other_errors <- ifelse(home_team != "SFN", home_errors, visitor_errors)) %>%
# Make a column for game number
arrange(date) %>%
mutate(game_number <- row_number())
### Combine cleaned full-season data with Posey's
data_posey_clean <- data_posey %>%
# Join with full season data
inner_join(data_clean) %>%
# Make a column for if walked or not
mutate(walked <- ifelse(walks > 0, "yes", "no"))
# Check data
dim(data_posey)
dim(data_posey_clean)
View(data_clean)
setwd("C:/Users/nade/Desktop/Data Analysis R")
### QUESTIONS ###
# 1. Full season: did the Giants win more games before or after the All-star break?
# 2. Buster Posey: Are the Giants more likely to win in games where Buster Posey
# was walked at least once?
### LOAD PACKAGES ###
library(dplyr)
### READ IN DATA ###
# READ FULL SEASON DATA
data <- read.table("data/rcourse_lesson3_data.txt", header = T, sep = "\t")
# READ PLAYER BUSTER POSEY DATA
data_posey <- read.table("data/rcourse_lesson3_data_posey.txt", header = T, sep = "\t")
### CLEANING DATA ###
# We want columns that refer to the Giants and their opponents
# We start making a column for whether Giants were the home or visiting team
# To make this column, we need mutate() method and ifelse() method
# Giant's home stadium is "SFN", this is the condition
# We write either home or visitor
### Add column to full season data to make data set specific to the Giants
data_clean <- data %>%
mutate(home_visitor = ifelse(home_team == "SFN", "home","visitor")) %>%
# Since we asked whether time was before or after All-Star break
# we need to make a column whether a game was before or after All-Star break
# the date of All-Star was July 13, 2010, data has YYYYMMDD format
# We use another mutate() and ifelse() methods
mutate(allstar_break = ifelse(date < 20100713, "before", "after")) %>%
# The last column we make is for the dependent variable for our logistic regression
# A series of ifelse() statements to determine:
# 1. The Giants were home team or not
# 2. The home team or the visitor scored more runs
# If the first is true, Giants home and scored more, we use 1
# If the Giants were away, and home team scored fewer, we use also 1
# Any other situation will be given 0
mutate(win = ifelse(home_team=="SFN" & home_score > visitor_score, 1,
ifelse(visitor_team=="SFN" & home_score < visitor_score, 1, 0))) %>%
# Make columns for Giants stats
mutate(giants_hits = ifelse(home_team=="SFN", home_hits, visitor_hits)) %>%
mutate(giants_pitchers_used = ifelse(home_team=="SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(giants_errors = ifelse(home_team=="SFN", home_errors, visitor_errors)) %>%
# Make columns for other team stats
mutate(other_hits = ifelse(home_team != "SFN", home_hits, visitor_hits)) %>%
mutate(other_pitchers_used = ifelse(home_team != "SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(other_errors = ifelse(home_team != "SFN", home_errors, visitor_errors)) %>%
# Make a column for game number
arrange(date) %>%
mutate(game_number = row_number())
### Combine cleaned full-season data with Posey's
data_posey_clean <- data_posey %>%
# Join with full season data
inner_join(data_clean) %>%
# Make a column for if walked or not
mutate(walked = ifelse(walks > 0, "yes", "no"))
# Check data
dim(data_posey)
dim(data_posey_clean)
setwd("C:/Users/nade/Desktop/Data Analysis R")
### Source the cleaning script ###
source("scripts/rcourse_lesson3_cleaning.R")
### LOAD PACKAGES ###
library(ggplot2)
# Change order level of variable for figure
data_figs <- data_clean %>%
mutate(allstar_break <- factor(allstar_break, levels = c("before", "after")))
View(data_figs)
setwd("C:/Users/nade/Desktop/Data Analysis R")
### Source the cleaning script ###
source("scripts/rcourse_lesson3_cleaning.R")
### LOAD PACKAGES ###
library(ggplot2)
# Change order level of variable for figure
data_figs <- data_clean %>%
mutate(allstar_break = factor(allstar_break, levels = c("before", "after")))
# Since we are dealing with categoritcal data, we use barplot
# to do so, we use group_by() and summarize() methods in dplyr
# we find mean of "win" before and after allstar_break
# multiply the mean by 100, so it looks like a percentage
# finally we have to ungroup() so that in future analysis, the group is not there
### Summarize full season data by All-star break
data_figs_sum <- data_figs %>%
group_by(allstar_break)
data_figs_sum <- data_figs %>%
# select what to group the data by
group_by(allstar_break) %>%
# select summarized value to be created
summarise(wins_perc = mean(win) * 100) %>%
# ungroup data
ungroup()
data_figs_sum
data_posey_figs = data_posey_clean
data_posey_figs_sum = data_posey_figs %>%
group_by(walked) %>%
summarise(wins_perc = mean(win) * 100) %>%
ungroup()
data_posey_figs_sum
allstar.plot = ggplot(data_figs_sum, aes(x = allstar_break, y = wins_perc)) +
# make the figure a barplot
#“stat = “identity” ” tells ggplot2 to use the specific numbers in our data frame
geom_bar(stat = "identity") +
# set y-axis range from 0 to 100
ylim(0, 100) +
# add a title
ggtitle("Percentage of Games Won Before and After All-Star Break") +
# Customize the x-axis
xlab("Before or After All-Star Break") +
# Customize the y-axis
ylab("Percentage of Games won") +
# Remove dark background
theme_classic() +
# add additional parameters to display the plot
theme(text = element_text(size=10), title = element_text(size=12))
pdf("figures/rcourse_lesson3_allstar.pdf")
allstar.plot
dev.off()
allstar.plot
# Posey walked or not plot
posey_walked.plot = ggplot(data_posey_figs_sum, aes(x = walked, y = wins_perc)) +
# make barplot
geom_bar(stat = "identity") +
# set y-axis range from 0 to 100
ylim(0, 100) +
# add a title
ggtitle("Percentage of Games won depending on if Posey walked or not") +
# customize x-axis
xlab("Posey walked during the game or not") +
# customize y-axis
ylab("Percentage of Games won") +
# remove dark background
theme_classic() +
# add additional parameters to display the plot
theme(text = element_text(size=10), title = element_text(size=12))
# save to pdf
pdf("figures/rcourse_lesson3_posey_walked.pdf")
posey_walked.plot
dev.off()
source("scripts/rcourse_lesson3_cleaning.R")
data_stats = data_clean
data_posey_stats = data_posey_clean
allstar.glm = glm(win ~ allstar_break, family = "binomial", data = data_stats)
allstar.glm.sum = summary(allstar.glm)
allstar.glm.sum
posey_walked_glm = glm(win ~ walked, family = "binomial", data = data_posey_stats)
posey_walked.glm = glm(win ~ walked, family = "binomial", data = data_posey_stats)
posey_walked.glm_sum = summary(posey_walked.glm)
posey_walked.glm_sum
save.image("C:/Users/nade/Desktop/Data Analysis R/write-up/rcourse_lesson3_environment.RData")
setwd("C:/Users/nade/Desktop/Data Analysis R")
### Source the cleaning script ###
source("scripts/rcourse_lesson3_cleaning.R")
### LOAD PACKAGES ###
library(ggplot2)
# Change order level of variable for figure
# So that before comes before after
data_figs <- data_clean %>%
mutate(allstar_break = factor(allstar_break, levels = c("before", "after")))
# Since we are dealing with categoritcal data, we use barplot
# to do so, we use group_by() and summarize() methods in dplyr
# we find mean of "win" before and after allstar_break
# multiply the mean by 100, so it looks like a percentage
# finally we have to ungroup() so that in future analysis, the group is not there
### Summarize full season data by All-star break
data_figs_sum <- data_figs %>%
# select what to group the data by
group_by(allstar_break) %>%
# select summarized value to be created
summarise(wins_perc = mean(win) * 100) %>%
# ungroup data
ungroup()
# Player specific data
data_posey_figs = data_posey_clean
# Summarize player specific data by whether walked or not
data_posey_figs_sum = data_posey_figs %>%
group_by(walked) %>%
summarise(wins_perc = mean(win) * 100) %>%
ungroup()
### MAKE FIGURES ###
# All-star Break
allstar.plot = ggplot(data_figs_sum, aes(x = allstar_break, y = wins_perc)) +
# make the figure a barplot
#“stat = “identity” ” tells ggplot2 to use the specific numbers in our data frame
geom_bar(stat = "identity") +
# set y-axis range from 0 to 100
ylim(0, 100) +
# add a title
ggtitle("Percentage of Games Won Before and After All-Star Break") +
# Customize the x-axis
xlab("Before or After All-Star Break") +
# Customize the y-axis
ylab("Percentage of Games won") +
# Remove dark background
theme_classic() +
# add additional parameters to display the plot
theme(text = element_text(size=10), title = element_text(size=12))
# Write figure and save to pdf
pdf("figures/rcourse_lesson3_allstar.pdf")
allstar.plot
dev.off()
# Posey walked or not plot
posey_walked.plot = ggplot(data_posey_figs_sum, aes(x = walked, y = wins_perc)) +
# make barplot
geom_bar(stat = "identity") +
# set y-axis range from 0 to 100
ylim(0, 100) +
# add a title
ggtitle("Percentage of Games won depending on if Posey walked or not") +
# customize x-axis
xlab("Posey walked during the game or not") +
# customize y-axis
ylab("Percentage of Games won") +
# remove dark background
theme_classic() +
# add additional parameters to display the plot
theme(text = element_text(size=10), title = element_text(size=12))
# save to pdf
pdf("figures/rcourse_lesson3_posey_walked.pdf")
posey_walked.plot
dev.off()
### Done With Figures ###
setwd("C:/Users/nade/Desktop/Data Analysis R")
### QUESTIONS ###
# 1. Full season: did the Giants win more games before or after the All-star break?
# 2. Buster Posey: Are the Giants more likely to win in games where Buster Posey
# was walked at least once?
### LOAD PACKAGES ###
library(dplyr)
### READ IN DATA ###
# READ FULL SEASON DATA
data <- read.table("data/rcourse_lesson3_data.txt", header = T, sep = "\t")
# READ PLAYER BUSTER POSEY DATA
data_posey <- read.table("data/rcourse_lesson3_data_posey.txt", header = T, sep = "\t")
### CLEANING DATA ###
# We want columns that refer to the Giants and their opponents
# We start making a column for whether Giants were the home or visiting team
# To make this column, we need mutate() method and ifelse() method
# Giant's home stadium is "SFN", this is the condition
# We write either home or visitor
### Add column to full season data to make data set specific to the Giants
data_clean <- data %>%
mutate(home_visitor = ifelse(home_team == "SFN", "home","visitor")) %>%
# Since we asked whether time was before or after All-Star break
# we need to make a column whether a game was before or after All-Star break
# the date of All-Star was July 13, 2010, data has YYYYMMDD format
# We use another mutate() and ifelse() methods
mutate(allstar_break = ifelse(date < 20100713, "before", "after")) %>%
# The last column we make is for the dependent variable for our logistic regression
# A series of ifelse() statements to determine:
# 1. The Giants were home team or not
# 2. The home team or the visitor scored more runs
# If the first is true, Giants home and scored more, we use 1
# If the Giants were away, and home team scored fewer, we use also 1
# Any other situation will be given 0
mutate(win = ifelse(home_team=="SFN" & home_score > visitor_score, 1,
ifelse(visitor_team=="SFN" & home_score < visitor_score, 1, 0))) %>%
# Make columns for Giants stats
mutate(giants_hits = ifelse(home_team=="SFN", home_hits, visitor_hits)) %>%
mutate(giants_pitchers_used = ifelse(home_team=="SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(giants_errors = ifelse(home_team=="SFN", home_errors, visitor_errors)) %>%
# Make columns for other team stats
mutate(other_hits = ifelse(home_team != "SFN", home_hits, visitor_hits)) %>%
mutate(other_pitchers_used = ifelse(home_team != "SFN", home_pitchers_used, visitor_pitchers_used)) %>%
mutate(other_errors = ifelse(home_team != "SFN", home_errors, visitor_errors)) %>%
# Make a column for game number
arrange(date) %>%
mutate(game_number = row_number())
### Combine cleaned full-season data with Posey's
data_posey_clean <- data_posey %>%
# Join with full season data
inner_join(data_clean) %>%
# Make a column for if walked or not
mutate(walked = ifelse(walks > 0, "yes", "no"))
# Check data
dim(data_posey)
dim(data_posey_clean)
setwd("C:/Users/nade/Desktop/Data Analysis R")
### Source the cleaning script ###
source("scripts/rcourse_lesson3_cleaning.R")
### LOAD PACKAGES ###
library(ggplot2)
# Change order level of variable for figure
# So that before comes before after
data_figs <- data_clean %>%
mutate(allstar_break = factor(allstar_break, levels = c("before", "after")))
# Since we are dealing with categoritcal data, we use barplot
# to do so, we use group_by() and summarize() methods in dplyr
# we find mean of "win" before and after allstar_break
# multiply the mean by 100, so it looks like a percentage
# finally we have to ungroup() so that in future analysis, the group is not there
### Summarize full season data by All-star break
data_figs_sum <- data_figs %>%
# select what to group the data by
group_by(allstar_break) %>%
# select summarized value to be created
summarise(wins_perc = mean(win) * 100) %>%
# ungroup data
ungroup()
# Player specific data
data_posey_figs = data_posey_clean
# Summarize player specific data by whether walked or not
data_posey_figs_sum = data_posey_figs %>%
group_by(walked) %>%
summarise(wins_perc = mean(win) * 100) %>%
ungroup()
### MAKE FIGURES ###
# All-star Break
allstar.plot = ggplot(data_figs_sum, aes(x = allstar_break, y = wins_perc)) +
# make the figure a barplot
#“stat = “identity” ” tells ggplot2 to use the specific numbers in our data frame
geom_bar(stat = "identity") +
# set y-axis range from 0 to 100
ylim(0, 100) +
# add a title
ggtitle("Percentage of Games Won Before and After All-Star Break") +
# Customize the x-axis
xlab("Before or After All-Star Break") +
# Customize the y-axis
ylab("Percentage of Games won") +
# Remove dark background
theme_classic() +
# add additional parameters to display the plot
theme(text = element_text(size=10), title = element_text(size=12))
# Write figure and save to pdf
pdf("figures/rcourse_lesson3_allstar.pdf")
allstar.plot
dev.off()
# Posey walked or not plot
posey_walked.plot = ggplot(data_posey_figs_sum, aes(x = walked, y = wins_perc)) +
# make barplot
geom_bar(stat = "identity") +
# set y-axis range from 0 to 100
ylim(0, 100) +
# add a title
ggtitle("Percentage of Games won depending on if Posey walked or not") +
# customize x-axis
xlab("Posey walked during the game or not") +
# customize y-axis
ylab("Percentage of Games won") +
# remove dark background
theme_classic() +
# add additional parameters to display the plot
theme(text = element_text(size=10), title = element_text(size=12))
# save to pdf
pdf("figures/rcourse_lesson3_posey_walked.pdf")
posey_walked.plot
dev.off()
### Done With Figures ###
### READ IN DATA ###
source("scripts/rcourse_lesson3_cleaning.R")
### LOAD PACKAGES ###
# None
### ORGANIZE DATA ###
# Full-season data
data_stats = data_clean
# Player specific data
data_posey_stats = data_posey_clean
### BUILD MODEL - FULL SEASON DATA ###
# to do logistic regression, we use glm() method, the generalized linear regression
# family = "binomial" tells R we wanna run a logistic regression
allstar.glm = glm(win ~ allstar_break, family = "binomial", data = data_stats)
allstar.glm.sum = summary(allstar.glm)
allstar.glm.sum
# Intercept is positive 0.4394. This means that after the All-Star break
# (after is before before) the Giants were above 50% for the percentage
# of wins. (since 0 is chance here, postive above, negative below in logistic regress)
# p-value for intercept is 0.065, so we cannot say Giants were significantly
# above the chance after the break, but close enough
# our slope is negative 0.3028, since "before" is the default level, (before=1, after=0)
# this means that Giants had a lower percentage of wins before the All-Star break compared
# to after
# but p-value is 0.344 suggesting this is not statistically significant
### BUILD MODEL - PLAYER SPECIFIC DATA ###
# Make logistic regression
posey_walked.glm = glm(win ~ walked, family = "binomial", data = data_posey_stats)
posey_walked.glm_sum = summary(posey_walked.glm)
posey_walked.glm_sum
# Here the estimated intercept is -0.09531, "no" is the default value, so if Posey
# was NOT walked, the Giants were below 50% for winning
# although p-value tells this is not statistically significant
# the walked variable however, shows 2.49 quite positive with significant p-value
# suggesting that if Posey walked, Giants were more likely to win
save.image("C:/Users/nade/Desktop/Data Analysis R/write-up/rcourse_lesson3_environment.RData")
