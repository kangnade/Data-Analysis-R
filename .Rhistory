x <- 1:10
print(names(x))
for (i in names(x)) {
print(i)
print(x[[i]])
}
show_mean(iris)
irirs
iris
show_mean(iris)
?str_pad
1L
?str_c
?str_pad
str_pad("hadley", 30, "left")
show_mean <- function(df, digits = 2){
# To format the output, we need to know the length of the
# names of each column in the dataset
longest <- max(str_length(names(df)))
# Write the for loop
for(i in names(df)){
# check if the data values are numeric, so can compute mean
if(is.numeric(df[[i]])){
# Use cat() function
cat(str_c(
str_pad(str_c(i, ":"), longest+1, "right"),
format(mean(df[[i]]), digits = digits, nsmall = digits),
sep = " "
), "\n")
}
}
}
show_mean(iris)
?apply
test <- c(TRUE, TRUE, FALSE, TRUE)
x <- seq_along(test)
x
?col_summary
col_summary
is_numeric <- vector("logical", length(iris))
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
index <- seq_along(iris)[[is_numeric]]
index
index <- seq_along(iris)[is_numeric]
index
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
}
index <- seq_along(iris)[is_numeric]
index
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
}
index <- seq_along(iris)[is_numeric]
index
is_numeric
is_numeric <- vector("logical", length(iris))
is_numeric
for(i in seq_along(df)){
is_numeric[[i]] <- is.numeric(iris[[i]])
}
index <- seq_along(iris)[is_numeric]
index
iris
iris
library(tidyverse)
iris
is_num <- c(TRUE, TRUE, TRUE, TRUE, FALSE)
iris[is_num]
index <- seq_along(iris)[is_num]
index
col_summary_num <- function(df, fun){
# need a vector to indicate whether the column is numeric
is_num <- vector("logical", length(df))
for(i in seq_along(df)){
is_num[[i]] <- is.numeric(df[[i]])
}
# we now have a boolean vector, and can extract the indices
# of the columns that are numeric
index <- seq_along(df)[is_num]
# Since is_numeric is boolean T or F, we can sum the total
# number of numeric columns
num <- sum(is_num)
# Now with this information, we can get our output vector
result <- vector("double", num)
for(i in index){
result[i] <- fun(df[[i]])
}
}
col_summary_num(iris)
col_summary_num(iris, mean)
col_summary_num <- function(df, fun){
# need a vector to indicate whether the column is numeric
is_num <- vector("logical", length(df))
for(i in seq_along(df)){
is_num[[i]] <- is.numeric(df[[i]])
}
# we now have a boolean vector, and can extract the indices
# of the columns that are numeric
index <- seq_along(df)[is_num]
# Since is_numeric is boolean T or F, we can sum the total
# number of numeric columns
num <- sum(is_num)
# Now with this information, we can get our output vector
result <- vector("double", num)
for(i in index){
result[i] <- fun(df[[i]])
}
result
}
col_summary_num(iris, mean)
iris %>%
map_dbl(mean)
map_dbl(mtcars, mean)
map_lgl(nycflights13::flights, typeof)
map_chr(nycflights13::flights, typeof)
map(1:5, runif)
?runif
runif(5)
map(-2:2, rnorm, n = 5)
?rnorm
rnorm(-2, 5)
map(list(mtcars), ~ lm(mpg ~ wt, data = .))
?map
every2 <- function(x, p, ...) {
for (i in x) {
if (!p(i, ...)) {
# If any is FALSE we know not all of then were TRUE
return(FALSE)
}
}
# if nothing was FALSE, then it is TRUE
TRUE
}
every2(1:3, function(x) {x > 1})
#> [1] FALSE
every2(1:3, function(x) {x > 0})
#> [1] TRUE
col_sum2 <- function(df, f, ...) {
map(keep(df, is.numeric), f, ...)
}
col_sum2(iris, mean, median)
col_sum2 <- function(df, f, ...) {
map(keep(df, is.numeric), f, ...)
}
col_sum2(iris, mean)
col_sum2 <- function(df, f, f2, ...) {
map2(keep(df, is.numeric), f, f2, ...)
}
col_sum2(iris, mean, median)
col_sum2 <- function(df, f, f2, ...) {
map2(keep(df, is.numeric), f, f2, ...)
}
col_sum2(iris, mean, median)
col_sum2 <- function(df, f,  ...) {
map2(keep(df, is.numeric), f, ...)
}
col_sum2(iris, mean)
col_sum2 <- function(df, f,  ...) {
map2(keep(df, is.numeric), f, ...)
}
col_sum2(iris, mean)
col_sum2 <- function(df, f,  ...) {
map(keep(df, is.numeric), f, ...)
}
col_sum2(iris, mean)
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f)
}
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
# OK
col_sum3(df, mean)
col_sum3(df[1:2], mean)
col_sum3(df[1], mean)
col_sum3(df[0], mean)
sapply(df[0], isnumeric)
sapply(df[0], is.numeric)
library(tidyverse)
library(modelr)
options(na.action = no.warn)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
?runif
models <- tibble(
a1 = runif(250, -20, 40),
b1 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(
aes(intercept = a1, slope = a2),
data = models, alpha = 1/4
) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(
aes(intercept = a1, slope = a2),
data = models, alpha = 1/4
) +
geom_point()
?geom_abline
model1 <- function(a, data){
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_difference <- function(mod, data){
diff <- data$y - model1(mod, data)
sqrt(mean(diff^2))
}
measure_difference(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2){
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
sim1_dist <- function(a1, a2){
measure_difference(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
?aes
?color
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(aes(intercept = a1, slope = a2, color = -dist),
data = filter(models, rank(dist)<=10))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(aes(intercept = a1, slope = a2, color = dist),
data = filter(models, rank(dist)<=10))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(aes(intercept = a1, slope = a2, color = -dist),
data = filter(models, rank(dist)<=10))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(aes(intercept = a1, slope = a2, color = +dist),
data = filter(models, rank(dist)<=10))
ggplot(models, aes(a1, a2)) +
geom_point(
data = filter(models, rank(dist) <= 10),
size = 4, color = "red"
) +
geom_point(aes(color = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid
head(grid)
grid %>%
ggplot(aes(a1, a2)) +
geom_point(
data = filter(grid, rank(dist) <= 10),
size = 4, color = "red"
) +
geom_point(aes(color = -dist))
?seq
grid <- expand.grid(
a1 = seq(-5, 20, length = 10),
a2 = seq(1, 3, length = 10)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
head(grid)
grid %>%
ggplot(aes(a1, a2)) +
geom_point(
data = filter(grid, rank(dist) <= 10),
size = 4, color = "red"
) +
geom_point(aes(color = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
head(grid)
grid %>%
ggplot(aes(a1, a2)) +
geom_point(
data = filter(grid, rank(dist) <= 10),
size = 4, color = "red"
) +
geom_point(aes(color = -dist))
best <- optim(c(0, 0), measure_difference, data = sim1)
best$par
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
lm(data = sim1, y~x)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
ggplot(sim1a, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_abline()
ggplot(sim1a, aes(x, y)) +
geom_point(size = 2, color = "grey30") +
geom_smooth(method = "lm")
?tibble
simt <- function(i){
tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2),
id = i
)
}
?map_df
?rep
rep(1:10, each = 3)
result <- map_df(1:15, simt)
?facet_wrap
ggplot(result, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ id, ncol ncol = 5)
ggplot(result, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ id, ncol ncol = 4)
ggplot(result, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ id, ncol = 4)
ggplot(result, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
facet_wrap(~ id, ncol = 4)
sim_norm <- function(i){
tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rnorm(length(x)),
id = i
)
}
?rt
result <- map_df(1:15, simt)
?rt
result_norm <- map_df(1:15, sim_norm)
ggplot(result_norm, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
facet_wrap(~ id, ncol = 4)
tibble(
x = seq(-5, 5, length.out = 100),
normal = rnorm(x),
student_t = dt(x, df = 2)
) %>%
gather(distribution, density, -x) %>%
ggplot(aes(x, density, color = distribution)) + geom_line()
tibble(
x = seq(-5, 5, length.out = 100),
normal = dnorm(x),
student_t = dt(x, df = 2)
) %>%
gather(distribution, density, -x) %>%
ggplot(aes(x = x, y = density, colour = distribution)) +
geom_line()
measure_distance <- function(mod, data) {
diff <- data$y - make_prediction(mod, data)
mean(abs(diff))
}
measure_distance <- function(mod, data) {
diff <- data$y - make_prediction(mod, data)
mean(abs(diff))
}
prediction <- function(vec, data){
vec[1] + vec[2]*data$x
}
make_prediction <- function(vec, data){
vec[1] + vec[2]*data$x
}
best <- optim(c(0,0), measure_distance, data = sim1a)
best
best$par
sim1
sim1a
model1 <- function(a, data){
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
count(model1(c(7, 1.5), sim1))
sim1$y - model1(c(7, 1.5), sim1)
sim1
model1(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2){
measure_difference(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
measure_difference(c(7, 1.5), sim1)
sim1$y - model1(c(7, 1.5), sim1)
measure_difference(c(7, 1.5), sim1)
model3 <- function(a, data) {
a[1] + data$x * a[2] + a[3]
}
measure_distance_3 <- function(a, data) {
diff <- data$y - model3(a, data)
sqrt(mean(diff ^ 2))
}
best3a <- optim(c(0, 0, 0), measure_distance_3, data = sim1)
best3a$par
sim1_mod <- lm(data = sim1, y~x)
summary(sim1_mod)
grid <- sim1 %>%
data_grid(x)
grid
grid <- grid %>%
add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(
aes(y = pred),
data = grid,
color = "red",
size = 1
)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
?loess
sm1_mod_loess <- loess(y~x, data = sm1)
sim1_mod_loess <- loess(y~x, data = sim1)
summary(sim1_mod_loess)
grid_loess <- sim1 %>%
data_grid(x)
grid_loess
grid_loess <- sim1 %>%
data_grid(x) %>%
add_predictions(sim1_mod_loess)
grid_loess
grid_loess_pred_plot <- ggplot(sim1, aes(x)) +
geom_point(aes(y)) +
geom_line(data = grid, aes(pred), color = "red", size = 2)
grid_loess_pred_plot
grid_loess_pred_plot <- ggplot(sim1, aes(x = x)) +
geom_point(aes(y = y)) +
geom_line(data = grid, aes(pred), color = "red", size = 2)
grid_loess_pred_plot
grid_loess_pred_plot <- ggplot(sim1, aes(x = x)) +
geom_point(aes(y = y)) +
geom_line(data = grid, aes(y = pred), color = "red", size = 2)
grid_loess_pred_plot
grid_residuals <- sim1 %>%
add_residuals(sim1_mod_loess)
grid_residuals
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
grid_loess_pred_plot <- ggplot(sim1, aes(x = x)) +
geom_point(aes(x = x, y = y)) +
geom_line(data = grid_loess, aes(y = pred), color = "red", size = 2)
grid_loess_pred_plot
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point(aes(y = resid), data =sim1) +
geom_point(aes(y = resid), data = grid_loess)
grid_residuals <- sim1 %>%
add_residuals(sim1_mod_loess, var = "residual_loess")
grid_residuals
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point(aes(y = resid), data =sim1) +
geom_point(aes(y = resid_loess), data = grid_loess, color = "red")
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point(aes(y = resid), data =sim1) +
geom_point(aes(y = residual_loess), data = grid_loess, color = "red")
grid_residuals <- sim1 %>%
add_residuals(sim1_mod_loess, var = "residual_loess")
grid_residuals
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point(aes(y = resid), data =sim1) +
geom_point(aes(y = residual_loess), data = grid_residuals, color = "red")
sim1_mod <- lm(y~x, data= sim1)
sim1 <- sim1 %>%
add_predictions(sim1_mod) %>%
add_residuals(sim1_mod) %>%
add_predictions(sim1_mod_loess, var = "loess_predictions") %>%
add_residuals(sim1_mod_loess, var = "loess_residuals")
sim1
ggplot(sim1, aes(x = x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = loess_predictions), size = 2, color = "red")
ggplot(sim1, aes(x = x)) +
geom_point(aes(y = resid)) +
geom_point(aes(y = loess_residuals), color = "red", size = 2)
?gather_predictions
test <- sim1
test
