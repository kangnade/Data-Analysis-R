parse_number("$123.456.789")
parse_number("$123,456,789")
parse_number(
"123.456.789",
locale = locale(grouping_mark = ".")
)
parse_number(
"123'456'789",
locale = locale(grouping_mark = "'")
parse_number(
"123'456'789",
locale = locale(grouping_mark = "'")
)
parse_number(
"123'456'789",
locale = locale(grouping_mark = "'")
)
charToRaw("Nade")
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
x1
x2
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
guess_encoding(charToRaw(x1))
guess_encoding(charToRaw(x2))
parse_character(x2, locale = locale(encoding = "KOI8-R"))
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
parse_datetime("2010-10-01T2010")
parse_datetime("20101001")
parse_date("2010-10-01")
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01-02-15", "%d/%m/%y")
parse_date("01-02-15", "%d/%m/%y")
parse_date("01-02-15", "%d/%m/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
?locale
parse_number(
"123'456'789",
locale = locale(decimal_mark = ".", grouping_mark = "'")
) # Expected: 123456789
parse_number(
"123'456'789",
locale = locale(decimal_mark = "'", grouping_mark = "'")
) # Expected: 123456789
parse_number(
"123,456,789",
locale = locale(decimal_mark = ",")
)
parse_number(
"123.456.789",
locale = locale(decimal_mark = ",")
)
str(parse_guess("01/02/2013", locale = locale(date_format = "%d/%m/%Y")))
parse_date("01/02/2013", locale = locale(date_format = "%d/%m/%Y"))
?cn
parse_date("1月26日2015年", "%B%d%Y", locale = locale("cn"))
parse_date("1月26日2015年", "%B%d%Y", locale = locale("cn-zh"))
parse_date("1月26日2015年", "%B%d%Y", locale = locale("zh"))
parse_date("一月 二十六日 二零一五年", "%B %d %Y", locale = locale("zh"))
locale("zh")
parse_date("一月 26 2015", "%B %d %Y", locale = locale("zh"))
?readr
?read_csv
library(tidyverse)
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, "%B %d, %Y")
parse_date(d2, "%Y-%b-%d")
parse_date(d3, "%d-%b-%Y")
parse_date(d4, c("%B %d (%Y)", "%B %d (%Y)"))
parse_date(d4, "%B %d (%Y)")
parse_date(d5, "%b-%d-%y")
parse_date(d5, "%b/%d/%y")
parse_date(d5, "%m/%d/%y")
library(hms)
parse_time(t1)
parse_time(t1, "%H%M")
parse_time(t2, "%I:%M:%S.%OS %p")
challenge <- read_csv(readr_example("challenge.csv"))
problems(challenge)
challenge <- read_csv(readr_example("challenge.csv"), col_types = cols(x = col_integer(), y = col_character()))
challenge <- read_csv(readr_example("challenge.csv"), col_types = cols(x = col_double(), y = col_character()))
tail(challenge)
challenge <- read_csv(readr_example("challenge.csv"), col_types = cols(
x = col_double(), y = col_date()
))
tail(challenge)
challenge2 <- read_csv(readr_example("challenge.csv"),
guess_max = 1001)
challenge2
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character()))
challenge2
df <- tribble(
~x, ~y,
"1", "1.21",
"2", "2.32",
"3", "4.56"
)
df
type_convert(df)
write_rds(challenge, "challenge.rds")
read_rds("challenge.rds")
library(feather)
install.packages("feather")
library(feather)
write_feather(challenge, "challenge.feather")
read_feather("challenge.feather")
library(tidyverse)
table4a
table4a %>%
gather('1999', '2000', key = "year", value = "cases")
table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
table4b
table4b %>%
gather(`1999`,`2000`, key = "year", value = "population")
tidy4a <- table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
tidy4b <- table4b %>%
gather(`1999`,`2000`, key = "year", value = "population")
left_join(tidy4a, tidy4b)
table2
spread(table2, key = type, value = count)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
stocks
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
spread(people, key = key, value = value)
people <- tribble(
~name,             ~type,    ~count,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
spread(people, key = type, value = count)
people <- tribble(
~name,             ~key,    ~value, ~obs
#-----------------|--------|-------|-----
"Phillip Woods",   "age",       45,   1,
"Phillip Woods",   "height",   186,   1,
"Phillip Woods",   "age",       50,   2,
"Jessica Cordero", "age",       37,   1,
"Jessica Cordero", "height",   156,   1
)
people <- tribble(
~name,             ~key,    ~value, ~obs,
#-----------------|--------|------|------
"Phillip Woods",   "age",       45, 1,
"Phillip Woods",   "height",   186, 1,
"Phillip Woods",   "age",       50, 2,
"Jessica Cordero", "age",       37, 1,
"Jessica Cordero", "height",   156, 1
)
spread(people, key, value)
preg <- tribble(
~pregnant, ~male, ~female,
"yes",     NA,    10,
"no",      20,    12
)
gather(preg, sex, count, male, female)
tab;e3
table3
table3 %>%
separate(rate, into = c("cases", "population"))
table3 %>%
separate(rate, into = c("case", "population"), sep = "/")
table3 %>%
separate(rate, into = c("case", "population"),
convert = TRUE)
table3 %>%
separate(year, into = c("century", "year"), sep = 2)
table5
table5 %>%
unite(new, century, year)
table5 %>%
unite(new, century, year, sep = "")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
?separate
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "drop")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "merge")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "right")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "left")
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
stocks %>%
spread(year, return)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks %>%
complete(year, qtr)
treatment <- tribble(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment
treatment %>%
fill(person)
?spread
?fill
?spread
?complete
who
library(tidyverse)
who
who1 <- who %>%
gather(new_sp_m014:newrel_f65, key = "key",
value = "cases",
na.rm = TRUE)
who1
who1 %>%
count(key)
who2 <- who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who2
who3 <- who2 %>%
separate(key, c("new", "type", "sexage"), sep = "_")
who3
who3 %>%
count(new)
who4 <- who3 %>%
select(-new, -iso2, -iso3)
who4
who5 <- who4 %>%
separate(sexage, c("sex", "age"), sep = 1)
who5
library(tidyverse)
library(nycflights13)
airlines
airports
planes
weather
planes %>%
count(tailnum) %>%
filter(n > 1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
flights %>%
count(year, month, day, flights) %>%
filter(n > 1)
flights %>%
count(year, month, day, flight) %>%
filter(n > 1)
flights %>%
count(year, month, day, tailnum) %>%
filter(n > 1)
flights %>%
arrange(year, month, day, sched_dep_time, carrier, flight) %>%
mutate(flight_id = row_number()) %>%
glimpse()
flights
Lahman::Batting
Lahman::Batting %>%
count(playerID, yearID, stint) %>%
filter(n > 1)
babynames::babynames
babynames::babynames
library(babynames)
nasaweather::atmos
fueleconomy:vehicles
ggplot2::diamonds
ggplot2::diamonds %>%
distinct() %>%
nrow()
ggplot2::diamonds %>%
nrow()
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2
flights2 %>%
select(-origin, -dest)
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
flights2 %>%
select(-origin, -dest) %>%
mutate(name = airlines$name[match(carrier, airlines$carrier)])
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(mapping = aes(lon, lat)) +
borders("state") +
geom_point(color = n()) +
coord_quickmap()
library(purrr)
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(mapping = aes(lon, lat)) +
borders("state") +
geom_point(color = n()) +
coord_quickmap()
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(mapping = aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
avg_dest_delay <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c(dest = "faa"))
avg_dest_delay %>%
ggplot(mapping = aes(lon, lat, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap()
airports
flights %>%
left_join(airports, by = c(dest = "faa")) %>%
left_join(airports, by = c(origin = "faa")) %>%
head()
View(flights)
flights_loc <- flights %>%
left_join(airports, by = c(dest = "faa")) %>%
left_join(airports, by = c(origin = "faa")) %>%
head()
View(flights_loc)
flights_loc <- flights %>%
left_join(airports, by = c(dest = "faa")) %>%
left_join(airports, by = c(origin = "faa")) %>%
head()
flights_loc
plane_age <- planes %>%
mutate(age = 2018 - year) %>%
select(tailnum, age)
flights %>%
inner_join(plane_age, by = "tailnum") %>%
group_by(age) %>%
summarise(delay = mean(dep_delay)) %>%
ggplot(mapping = aes(x = age, y = delay)) +
geom_point() +
geom_line()
flights %>%
inner_join(plane_age, by = "tailnum") %>%
group_by(age) %>%
filter(!is.na(dep_delay)) %>%
summarise(delay = mean(dep_delay)) %>%
ggplot(mapping = aes(x = age, y = delay)) +
geom_point() +
geom_line()
weather
flight_weather <- flights %>%
inner_join(weather, by = c("origin" = "origin", "year" = "year",
"month" = "month", "day" = "day",
"hour" = "hour"))
flight_weather
flight_weather %>%
group_by(precip) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = precip, y = delay)) +
geom_line() + geom_point()
library(viridis)
install.packages("viridisLite")
install.packages("viridisLite")
install.packages("viridis")
install.packages("viridis")
library(viridis)
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_viridis()
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_gradient()
install.packages("viridis")
install.packages("viridis")
library(viridis)
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_gradient()
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_viridis()
install.packages("viridis")
install.packages("viridis")
library(viridis)
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_viridis()
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_viridis()
library(tidyverse)
library(nycflights13)
library(viridis)
flights %>%
filter(year == 2013, month == 6, day == 13) %>%
group_by(dest) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
inner_join(airports, by = c("dest" = "faa")) %>%
ggplot(aes(y = lat, x = lon, size = delay, colour = delay)) +
borders("state") +
geom_point() +
coord_quickmap() +
scale_color_viridis()
flights %>%
anti_join(planes, by = "tailnum") %>%
count(carrier, sort =TRUE)
planes_al100 <- filter(flights) %>%
group_by(tailnum) %>%
count() %>%
filter(n > 100)
planes_al100
flights %>%
semi_join(planes_al100, by = "tailnum")
flights %>%
group_by(year, month, day) %>%
summarise(all_24 = sum(dep_delay, na.rm = TRUE) + sum(arr_delay, na.rm = TRUE)) %>%
mutate(all_48 = all_24 + lag(all_24)) %>%
arrange(desc(all_48))
all_24
flights$all_24
v <- c(1,2,3,4,5,6,7)
lag(v)
airplane_multi_carrier <- flights %>%
group_by(tailnum, carrier) %>%
count() %>%
filter(n() > 1) %>%
select(tailnum) %>%
distinct()
airplane_multi_carrier
