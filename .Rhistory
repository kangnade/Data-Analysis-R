stdErr_robust
#Calculate the conventional standard error
#Just delete the HC in the vcovHC, so to get the conventional standarrd errors
vcov_conventional <- vcov(modelQ3)
stdErr_conventional <- sqrt(diag(vcov_conventional))
rbind(stdErr_conventional, stdErr_robust)
# Ways to display results with std errors
coeftest(modelQ3, vcov = vcov_robust)
# To see the confidence invertals
# 95% CI based on robust std. errors
confint(modelQ3, vcov = vcov_robust)
library(stargazer)
stargazer(
modelQ3, modelQ3, se = list(NULL, stdErr_robust), type = "text"
)
modelQ3 <- lm(wage ~ ., data=lmar)
summary(modelQ3)
help("one-tail")
help("hypothesis")
help(normal distribution)
0.02554*2
lmar$femaleXmarried <- lmar$female*lmar$married
model3b <- lm(wage~.,data=lmar)
summary(model3b)
bgtest(model3b)
confint(model3b)
linearHypothesis(model1, "femaleXmarried=0")
c(18,0,1,0,0,1,0,0)*model3b$coefficients
c(1,18,0,1,0,0,1,0,0)*model3b$coefficients
sum(1,18,0,1,0,0,1,0,0)*coef(model3b))
sum(18,0,1,0,0,1,0,0)*coef(model3b))
sum(c(18,0,1,0,0,1,0,0)*coef(model3b))
sum(c(1,18,0,1,0,0,1,0,0)*coef(model3b))
sum(c(1,18,0,1,0,0,1,0,0)*coef(model3b))
-20.7526029+18*1.7411167+1.8864791+1.9940948
-20.7526029+18*1.7411167+1.8864791+1.9940948
sum(-20.7526029+18*1.7411167+1.8864791+1.9940948)
library(dplyr)
library(ggplot2)
```{r, echo=FALSE}
```{r, echo=FALSE}
library(purrr)
# install.packages("tidyverse")
setwd("C:/Users/nade/Desktop/Data Analysis R")
### LOAD PACKAGE ###
library(tidyverse)
mpg_reorder_boxplot <- ggplot(data = mpg, mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
geom_boxplot(mapping = aes(color = class)) +
ggtitle(expression(atop("Cars Highway Miles Per Gallon", "by Various Classes"))) +
xlab("Class") +
ylab("Highway Miles Per Gallon") +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 10),
title = element_text(size = 14))
mpg_reorder_boxplot
mpg_reorder_boxplot <- ggplot(data = mpg, mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
geom_boxplot(mapping = aes(color = class)) +
ggtitle(expression(atop("Cars Highway Miles Per Gallon", "by Various Classes"))) +
xlab("Class") +
ylab("Highway Miles Per Gallon") +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 10),
title = element_text(size = 14))
png("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_reorder_class_boxplot.png")
mpg_reorder_boxplot
pdf("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_reorder_class_boxplot.pdf")
mpg_reorder_boxplot
dev.off()
mpg_reorder_flip_boxplot <- ggplot(data = mpg, mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
geom_boxplot(mapping = aes(color = class)) +
ggtitle(expression(atop("Cars Highway Miles Per Gallon", "by Various Classes"))) +
ylab("Class, reordered") +
xlab("Highway Miles Per Gallon") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 10),
title = element_text(size = 14))
mpg_reorder_flip_boxplot
mpg_reorder_flip_boxplot <- ggplot(data = mpg, mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
geom_boxplot(mapping = aes(color = class)) +
ggtitle(expression(atop("Cars Highway Miles Per Gallon", "by Various Classes"))) +
ylab("Class, reordered") +
xlab("Highway Miles Per Gallon") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 10),
title = element_text(size = 14))
png("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_reorder_flip_class_boxplot.png")
mpg_reorder_flip_boxplot
pdf("r_wickham/figures/chapter5/r_for_data_science_wickham_textbook_mpg_reorder_flip_class_boxplot.pdf")
mpg_reorder_flip_boxplot
dev.off()
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price),
alpha = 1/100)
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
install.packages("hexbin")
library(hexbin)
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_number(carat, 20)))
library(modelr)
mod <- lm(log(price) ~ log(carat), data =diamonds)
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(data = diamonds2) +
geom_point(mapping = aes(x = carat, y = resid))
ggplot(data = diamonds2) +
geom_boxplot(mapping = aes(x = cut, y = resid))
library(tidyverse)
as_tibble(iris)
tibble(
x = 1:5,
y = 1,
z = x^3 + y
)
tb <- tibble(
':)' = "smile",
':(' = "sad",
'World Cup' = "string"
)
tb
tribble(
~x, ~y, ~z,
#==/--/----
"a", 2, 3.6,
"b", 1, 8.5
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
atb <- tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
nycflights13::flights %>%
print(n = 10, width = Inf)
nycflights13::flights %>%
View()
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df
df$x
df[["x"]]
df[[1]]
df %>% .$x
df %>% .[["x"]]
print(mtcars)
df <- data.frame(abc = 1, xyz = "a")
df$x
df[,"xyz"]
df[, c("abc", "xyz")]
annoying <- tibble('1' = 1:10,
'2' = '1' * 2 + rnorm(length('1')))
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
annoying
tb <- tibble(
':)' = "smile",
':(' = "sad",
'World Cup' = "string"
)
tb
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
annoying
annoying$`1`
annoying[["'1"]]
annoying[["'1'"]]
annoying[['1']]
annoying %>% .$'1'
annoying %>% .[['1']]
ggplot(data = annoying) +
geom_point(mapping = aes(x = '1', y = '2'))
ggplot(data = annoying) +
geom_point(mapping = aes(x = `1`, y = `2`))
annoying %>%
mutate(`3` = `2` / `1`)
?package:tibble
?rename
rename(annoying, c(`1` = "one"))
rename(annoying, c("`1`" = "one"))
rename(annoying, c("`1`", "one"))
rename(annoying, "`1`"= "one")
rename(annoying, `1`= "one")
rename(annoying, `1`= one)
rename(annoying, `1` = one)
rename(annoying, 1 = one)
rename(annoying, '1' = one)
rename(annoying, one = `1`)
annoying[[`1`]]
annoying[['1']]
annoying %>% .$`1`
annoying %>% .[[`1`]]
annoying %>% .[['1']]
annoying %>%
mutate(`3` = `2` / `1`)
rename(annoying, two = `2`)
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
annoying
annoying %>%
mutate(`3` = `2` / `1`)
rename(annoying, one = `1`, two = `2`, three = `3`)
new_annoying <- annoying %>%
mutate(`3` = `2` / `1`)
rename(new_annoying, one = `1`, two = `2`, three = `3`)
?tibble::enframe
enframe(1:3)
enframe(c(a = 5, b = 7))
?tibble
?options
?tibble.width
?tibble
?tidyverse::tibble
?tidyverse
library(tidyverse)
?read_csv
?read_fwf
?read_delim
parse_double("1.23")
parse_double("1,23", locale = local(decimal_mark = ","))
parse_double("1,23", locale = locale(decimal_mark = ","))
parse_number("$100")
parse_number("20%")
parse_number("it costs $2000")
parse_number("$123.456.789")
parse_number("$123,456,789")
parse_number(
"123.456.789",
locale = locale(grouping_mark = ".")
)
parse_number(
"123'456'789",
locale = locale(grouping_mark = "'")
parse_number(
"123'456'789",
locale = locale(grouping_mark = "'")
)
parse_number(
"123'456'789",
locale = locale(grouping_mark = "'")
)
charToRaw("Nade")
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
x1
x2
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
guess_encoding(charToRaw(x1))
guess_encoding(charToRaw(x2))
parse_character(x2, locale = locale(encoding = "KOI8-R"))
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
parse_datetime("2010-10-01T2010")
parse_datetime("20101001")
parse_date("2010-10-01")
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01-02-15", "%d/%m/%y")
parse_date("01-02-15", "%d/%m/%y")
parse_date("01-02-15", "%d/%m/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
?locale
parse_number(
"123'456'789",
locale = locale(decimal_mark = ".", grouping_mark = "'")
) # Expected: 123456789
parse_number(
"123'456'789",
locale = locale(decimal_mark = "'", grouping_mark = "'")
) # Expected: 123456789
parse_number(
"123,456,789",
locale = locale(decimal_mark = ",")
)
parse_number(
"123.456.789",
locale = locale(decimal_mark = ",")
)
str(parse_guess("01/02/2013", locale = locale(date_format = "%d/%m/%Y")))
parse_date("01/02/2013", locale = locale(date_format = "%d/%m/%Y"))
?cn
parse_date("1月26日2015年", "%B%d%Y", locale = locale("cn"))
parse_date("1月26日2015年", "%B%d%Y", locale = locale("cn-zh"))
parse_date("1月26日2015年", "%B%d%Y", locale = locale("zh"))
parse_date("一月 二十六日 二零一五年", "%B %d %Y", locale = locale("zh"))
locale("zh")
parse_date("一月 26 2015", "%B %d %Y", locale = locale("zh"))
?readr
?read_csv
library(tidyverse)
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, "%B %d, %Y")
parse_date(d2, "%Y-%b-%d")
parse_date(d3, "%d-%b-%Y")
parse_date(d4, c("%B %d (%Y)", "%B %d (%Y)"))
parse_date(d4, "%B %d (%Y)")
parse_date(d5, "%b-%d-%y")
parse_date(d5, "%b/%d/%y")
parse_date(d5, "%m/%d/%y")
library(hms)
parse_time(t1)
parse_time(t1, "%H%M")
parse_time(t2, "%I:%M:%S.%OS %p")
challenge <- read_csv(readr_example("challenge.csv"))
problems(challenge)
challenge <- read_csv(readr_example("challenge.csv"), col_types = cols(x = col_integer(), y = col_character()))
challenge <- read_csv(readr_example("challenge.csv"), col_types = cols(x = col_double(), y = col_character()))
tail(challenge)
challenge <- read_csv(readr_example("challenge.csv"), col_types = cols(
x = col_double(), y = col_date()
))
tail(challenge)
challenge2 <- read_csv(readr_example("challenge.csv"),
guess_max = 1001)
challenge2
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character()))
challenge2
df <- tribble(
~x, ~y,
"1", "1.21",
"2", "2.32",
"3", "4.56"
)
df
type_convert(df)
write_rds(challenge, "challenge.rds")
read_rds("challenge.rds")
library(feather)
install.packages("feather")
library(feather)
write_feather(challenge, "challenge.feather")
read_feather("challenge.feather")
library(tidyverse)
table4a
table4a %>%
gather('1999', '2000', key = "year", value = "cases")
table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
table4b
table4b %>%
gather(`1999`,`2000`, key = "year", value = "population")
tidy4a <- table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
tidy4b <- table4b %>%
gather(`1999`,`2000`, key = "year", value = "population")
left_join(tidy4a, tidy4b)
table2
spread(table2, key = type, value = count)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
stocks
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
spread(people, key = key, value = value)
people <- tribble(
~name,             ~type,    ~count,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
spread(people, key = type, value = count)
people <- tribble(
~name,             ~key,    ~value, ~obs
#-----------------|--------|-------|-----
"Phillip Woods",   "age",       45,   1,
"Phillip Woods",   "height",   186,   1,
"Phillip Woods",   "age",       50,   2,
"Jessica Cordero", "age",       37,   1,
"Jessica Cordero", "height",   156,   1
)
people <- tribble(
~name,             ~key,    ~value, ~obs,
#-----------------|--------|------|------
"Phillip Woods",   "age",       45, 1,
"Phillip Woods",   "height",   186, 1,
"Phillip Woods",   "age",       50, 2,
"Jessica Cordero", "age",       37, 1,
"Jessica Cordero", "height",   156, 1
)
spread(people, key, value)
preg <- tribble(
~pregnant, ~male, ~female,
"yes",     NA,    10,
"no",      20,    12
)
gather(preg, sex, count, male, female)
tab;e3
table3
table3 %>%
separate(rate, into = c("cases", "population"))
table3 %>%
separate(rate, into = c("case", "population"), sep = "/")
table3 %>%
separate(rate, into = c("case", "population"),
convert = TRUE)
table3 %>%
separate(year, into = c("century", "year"), sep = 2)
table5
table5 %>%
unite(new, century, year)
table5 %>%
unite(new, century, year, sep = "")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
?separate
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "drop")
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "merge")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "right")
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), fill = "left")
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
stocks %>%
spread(year, return)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks %>%
complete(year, qtr)
treatment <- tribble(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment
treatment %>%
fill(person)
?spread
?fill
?spread
?complete
